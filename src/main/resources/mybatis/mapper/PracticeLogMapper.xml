<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="per.jxnflzc.practice.dao.PracticeLogMapper" >
  <resultMap id="BaseResultMap" type="per.jxnflzc.practice.model.PracticeLog" >
    <id column="log_id" property="logId" jdbcType="VARCHAR" />
    <result column="log_type" property="logType" jdbcType="VARCHAR" />
    <result column="log_content" property="logContent" jdbcType="VARCHAR" />
    <result column="created_by" property="createdBy" jdbcType="VARCHAR" />
    <result column="created_time" property="createdTime" jdbcType="TIMESTAMP" />
    <result column="updated_by" property="updatedBy" jdbcType="VARCHAR" />
    <result column="updated_time" property="updatedTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    log_id, log_type, log_content, created_by, created_time, updated_by, updated_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from practice_log
    where log_id = #{logId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from practice_log
    where log_id = #{logId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="per.jxnflzc.practice.model.PracticeLog" >
    insert into practice_log (log_id, log_type, log_content, 
      created_by, created_time, updated_by, 
      updated_time)
    values (#{logId,jdbcType=VARCHAR}, #{logType,jdbcType=VARCHAR}, #{logContent,jdbcType=VARCHAR}, 
      #{createdBy,jdbcType=VARCHAR}, #{createdTime,jdbcType=TIMESTAMP}, #{updatedBy,jdbcType=VARCHAR}, 
      #{updatedTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="per.jxnflzc.practice.model.PracticeLog" >
    insert into practice_log
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="logId != null" >
        log_id,
      </if>
      <if test="logType != null" >
        log_type,
      </if>
      <if test="logContent != null" >
        log_content,
      </if>
      <if test="createdBy != null" >
        created_by,
      </if>
      <if test="createdTime != null" >
        created_time,
      </if>
      <if test="updatedBy != null" >
        updated_by,
      </if>
      <if test="updatedTime != null" >
        updated_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="logId != null" >
        #{logId,jdbcType=VARCHAR},
      </if>
      <if test="logType != null" >
        #{logType,jdbcType=VARCHAR},
      </if>
      <if test="logContent != null" >
        #{logContent,jdbcType=VARCHAR},
      </if>
      <if test="createdBy != null" >
        #{createdBy,jdbcType=VARCHAR},
      </if>
      <if test="createdTime != null" >
        #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedBy != null" >
        #{updatedBy,jdbcType=VARCHAR},
      </if>
      <if test="updatedTime != null" >
        #{updatedTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="per.jxnflzc.practice.model.PracticeLog" >
    update practice_log
    <set >
      <if test="logType != null" >
        log_type = #{logType,jdbcType=VARCHAR},
      </if>
      <if test="logContent != null" >
        log_content = #{logContent,jdbcType=VARCHAR},
      </if>
      <if test="createdBy != null" >
        created_by = #{createdBy,jdbcType=VARCHAR},
      </if>
      <if test="createdTime != null" >
        created_time = #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedBy != null" >
        updated_by = #{updatedBy,jdbcType=VARCHAR},
      </if>
      <if test="updatedTime != null" >
        updated_time = #{updatedTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where log_id = #{logId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="per.jxnflzc.practice.model.PracticeLog" >
    update practice_log
    set log_type = #{logType,jdbcType=VARCHAR},
      log_content = #{logContent,jdbcType=VARCHAR},
      created_by = #{createdBy,jdbcType=VARCHAR},
      created_time = #{createdTime,jdbcType=TIMESTAMP},
      updated_by = #{updatedBy,jdbcType=VARCHAR},
      updated_time = #{updatedTime,jdbcType=TIMESTAMP}
    where log_id = #{logId,jdbcType=VARCHAR}
  </update>
</mapper>